#!/bin/bash

# COLORS
# http://unix.stackexchange.com/questions/148/colorizing-your-terminal-and-shell-environment
export COLOR_NC='\e[0m' # No Color
export COLOR_WHITE='\e[1;37m'
export COLOR_BLACK='\e[0;30m'
export COLOR_BLUE='\e[0;34m'
export COLOR_LIGHT_BLUE='\e[1;34m'
export COLOR_GREEN='\e[0;32m'
export COLOR_LIGHT_GREEN='\e[1;32m'
export COLOR_CYAN='\e[0;36m'
export COLOR_LIGHT_CYAN='\e[1;36m'
export COLOR_RED='\e[0;31m'
export COLOR_LIGHT_RED='\e[1;31m'
export COLOR_PURPLE='\e[0;35m'
export COLOR_LIGHT_PURPLE='\e[1;35m'
export COLOR_BROWN='\e[0;33m'
export COLOR_YELLOW='\e[1;33m'
export COLOR_GRAY='\e[0;30m'
export COLOR_LIGHT_GRAY='\e[0;37m'

# https://github.com/jfrazelle/dotfiles/blob/master/.functions#L252
# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
		LESS_TERMCAP_md=$(printf "\e[1;31m") \
		LESS_TERMCAP_me=$(printf "\e[0m") \
		LESS_TERMCAP_se=$(printf "\e[0m") \
		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
		LESS_TERMCAP_ue=$(printf "\e[0m") \
		LESS_TERMCAP_us=$(printf "\e[1;32m") \
		man "$@"
}

# http://stackoverflow.com/a/23389099
# hightlight color with grep
function greph {
    grep -E "$1|$" $2
}

# http://stackoverflow.com/a/18339127
function cpfind {
    find . -name "$1" -type f -exec cp {} $2 \;
}

function get_current_timestamp_milliseconds {
    echo $(($(date +%s%N)/1000000))
}

function counter {
    echo "Start Time -> $(date  '+%F %T') ($(get_current_timestamp_milliseconds))"
    START=$(get_current_timestamp_milliseconds)
    echo $@ | bash
    END=$(get_current_timestamp_milliseconds)
    DIFF=$(( $END - $START ))
    DIFFMILLI=$(bc <<< "scale=3;$DIFF/1000")
    echo "'$@' takes ${COLOR_BLUE}$DIFFMILLI seconds${COLOR_NC}"
}

alias 2clip="xclip -sel clip"

function sync-upstream {
    git checkout $1 && git fetch upstream && git merge upstream/$1
} 

function checkout-pr {
  # Ref: https://www.dotnetthailand.com/programming-cookbook/git/git-checkout#checkingoutaprbranchforcodingreview
  # Example: checkout-pr runyasak dotnetthailand.github.io fix/support-tablet-device
  if [[ "$1" == "-h" ]]; then
    echo "Index 1 = [REFERENCE_NAME]"
    echo "Index 2 = [REPOSITORY]"
    echo "Index 3 = [TARGET_BRANCH]"
  else
    git remote add $1 https://github.com/$1/$2 && git fetch $1 && git checkout $1/$3
  fi
}


#########################################################################################
#
#              Sharing the same `ssh-agent` among multiple login sessions
# 
#########################################################################################

# Ref: https://superuser.com/questions/141044/sharing-the-same-ssh-agent-among-multiple-login-sessions

function sshagent_findsockets {
    find /tmp -uid $(id -u) -type s -name agent.\* 2>/dev/null
}

function sshagent_testsocket {
    if [ ! -x "$(which ssh-add)" ] ; then
        echo "ssh-add is not available; agent testing aborted"
        return 1
    fi

    if [ X"$1" != X ] ; then
        export SSH_AUTH_SOCK=$1
    fi

    if [ X"$SSH_AUTH_SOCK" = X ] ; then
        return 2
    fi

    if [ -S $SSH_AUTH_SOCK ] ; then
        ssh-add -l > /dev/null
        if [ $? = 2 ] ; then
            echo "Socket $SSH_AUTH_SOCK is dead!  Deleting!"
            rm -f $SSH_AUTH_SOCK
            return 4
        else
            echo "Found ssh-agent $SSH_AUTH_SOCK"
            return 0
        fi
    else
        echo "$SSH_AUTH_SOCK is not a socket!"
        return 3
    fi
}

function sshagent_init {
    MODE=$1
    # ssh agent sockets can be attached to a ssh daemon process or an
    # ssh-agent process.

    AGENTFOUND=0

    # Attempt to find and use the ssh-agent in the current environment
    if sshagent_testsocket ; then AGENTFOUND=1 ; fi

    # If there is no agent in the environment, search /tmp for
    # possible agents to reuse before starting a fresh ssh-agent
    # process.
    if [ $AGENTFOUND = 0 ] ; then
        for agentsocket in $(sshagent_findsockets) ; do
            if [ $AGENTFOUND != 0 ] ; then break ; fi
            if sshagent_testsocket $agentsocket ; then AGENTFOUND=1 ; fi
        done
    fi

    # If at this point we still haven't located an agent, it's time to
    # start a new one
    if [ $AGENTFOUND = 0 ] ; then
        eval `ssh-agent`
    fi

    # Clean up
    unset AGENTFOUND
    unset agentsocket

    # Finally, show what keys are currently in the agent
    ssh-add -l
}

alias ssh-attach="sshagent_init"


#########################################################################################
#
#                                                End Block
#  
#########################################################################################
